/*
    Copyright (C) 2024, Chuck Garcia

    This file is part of libfqam and is available under the 3-Clause
    BSD license, which can be found in the LICENSE file at the top-level
    directory, or at http://opensource.org/licenses/BSD-3-Clause

*/

inspired by FLA. A methdology for formally deriving quantum algorithms.

## Modules

FQAM_Pauli_ops.c
FQAM_Op_gen.c
FQAM_staging.c

--- FQAM_Pauli_primitives.c ---

static FQAM_Op x_op;
static FQAM_Op z_op;
static FQAM_Op y_op;
static FQAM_Op eye_op;

/* Initializes static allocated pauli operators */
void pauli_ops_init_ (void);  // Calls operator_generator_gen() for each
pauli_gen_x (int state_space); // Call operator create, 
pauli_gen_z (int state_space);

--- FQAM_Operator.c --- 

FQAM_operator_create (FQAM_Operator operator, char *name)
FQAM_operator_finalize (); // Destroy FLA objects
FQAM_operator_generate...functions () // List of functions to help universal  generate any operator. 


--- FQAM_Staging.c ---


Static Objects:
  static list stage; // Stage data structure
  
Global functions:
bool FQAM_stage_init (void);
bool FQAM_stage_append (FQAM_Op operator); // Adds operator to staging list
bool FQAM_stage_finalize (); // Free stage and operator resources. 


--- FQAM_Rendering.c ---

void FQAM_show_diagram (void)


--- Headers ---

FQAM_Operator_gen.h

  bool FQAM_stage_init (void);
  bool FQAM_stage_append (FQAM_Op operator); // Adds operator to staging list
  bool FQAM_stage_finalize (); // Free stage and operator resources. 


  typdef struct {
    list_elem stage_elem; // Element for stag
    char *name;
    FLA_Obj mat_repr; // Operator Matrix Representation
  } FQAM_Op;
